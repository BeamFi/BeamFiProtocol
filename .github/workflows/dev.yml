name: BeamFi Dev CI / CD

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.19.1"
      - name: Install DFX
        run: echo y | sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
        env:
          DFX_VERSION: 0.13.1
      - run: dfx start --clean --background
      - name: Download vessel package management
        run: curl -L -o /usr/local/bin/vessel https://github.com/dfinity/vessel/releases/download/v0.6.3/vessel-linux64
      - run: chmod +x /usr/local/bin/vessel
      - name: Configure Escrow related canisters
        run: ./scripts/configure-local-escrow.sh
      - name: Update dfx.cfg for test
        run: npm run test:dfx:updateconfig
      - name: Update Env used by canister
        run: ./scripts/update-manager.sh
        env:
          INTERNET_IDENTITY_ANCHOR_ID: ${{ secrets.INTERNET_IDENTITY_ANCHOR_ID }}
          CONTROLLER_PRINCIPAL_ID: ${{ secrets.CONTROLLER_PRINCIPAL_ID }}
          CLIENT_KEY: ${{ secrets.CLIENT_KEY }}
          MONITORAGENT_CANISTER_ID: ${{ secrets.MONITORAGENT_CANISTER_ID }}
          BITCOIN_NETWORK: ${{ secrets.BITCOIN_NETWORK }}
          ZOOM_SECRET_TOKEN: ${{ secrets.ZOOM_SECRET_TOKEN }}
      - name: Deploy Ledger in local DFX server
        run: ./scripts/deploy-local-ledger.sh
      - name: Revert Ledger Candid to public for building with other canisters
        run: npm run dfx:ledger:public
      - name: Deploy canister in local DFX server
        run: echo yes | dfx deploy
      - name: Run Beam Escrow Reentrancy test
        run: ./backend/test/test-claim-reentrancy.sh
      - name: Run Restart Beam test
        run: ./backend/test/test-restart-beam.sh

  deploy:
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.19.1"
      - name: Setup canisters
        run: ./scripts/setup-dev.sh
      - name: Install DFX
        run: echo y | sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
        env:
          DFX_VERSION: 0.13.1
      - run: dfx start --clean --background
      - name: Add DFX identity and wallets
        run: ./scripts/add-ic-identity.sh
        env:
          DFX_IDENTITY: ${{ secrets.DFX_IDENTITY }}
          DFX_WALLETS: ${{ secrets.DFX_WALLETS }}
      - name: Download vessel package management
        run: curl -L -o /usr/local/bin/vessel https://github.com/dfinity/vessel/releases/download/v0.6.3/vessel-linux64
      - run: chmod +x /usr/local/bin/vessel
      - name: Update Env used by canister
        run: ./scripts/update-manager.sh
        env:
          INTERNET_IDENTITY_ANCHOR_ID: ${{ secrets.INTERNET_IDENTITY_ANCHOR_ID }}
          CONTROLLER_PRINCIPAL_ID: ${{ secrets.CONTROLLER_PRINCIPAL_ID }}
          CLIENT_KEY: ${{ secrets.CLIENT_KEY }}
          BEAM_CANISTER_ID: ${{ secrets.BEAM_CANISTER_ID }}
          BEAM_ESCROW_CANISTER_ID: ${{ secrets.BEAM_ESCROW_CANISTER_ID }}
          MONITORAGENT_CANISTER_ID: ${{ secrets.MONITORAGENT_CANISTER_ID }}
          BITCOIN_NETWORK: ${{ secrets.BITCOIN_NETWORK }}
          ZOOM_SECRET_TOKEN: ${{ secrets.ZOOM_SECRET_TOKEN }}
      - name: Build and deploy backend canisters to Internet Computer network
        run: ./scripts/reinstall-canisters.sh
      - name: Stop DFX server
        run: dfx stop
      - name: Show success mesg
        run: echo Congratulations! The build and deployment are successful.
